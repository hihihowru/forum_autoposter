#!/bin/bash

# =============================================================================
# Git Ê™îÊ°àÊïëÊè¥ËÖ≥Êú¨ #1ÔºöÂæû Cursor Local History ÈÇÑÂéüÊ™îÊ°àÂà∞Êö´Â≠òÂçÄ
# ‰ΩøÁî®ÊñπÊ≥ïÔºöchmod +x restore_from_local_history.sh && ./restore_from_local_history.sh
# ‰øÆÊîπËÆäÊï∏ÔºöDIAG_DIR (ÂàÜÊûêËº∏Âá∫Ë≥áÊñôÂ§æÂêçÁ®±)
# =============================================================================

# Ë®≠ÂÆöÂàÜÊûêËº∏Âá∫Ë≥áÊñôÂ§æÔºàË´ã‰øÆÊîπÁÇ∫ÊÇ®ÁöÑÂØ¶ÈöõË≥áÊñôÂ§æÂêçÁ®±Ôºâ
DIAG_DIR="n8n-migration-project_DIAG_20251013_113216"

# Ê™¢Êü•Ë≥áÊñôÂ§æÊòØÂê¶Â≠òÂú®
if [ ! -d "$DIAG_DIR" ]; then
    echo "‚ùå ÈåØË™§ÔºöÊâæ‰∏çÂà∞ÂàÜÊûêË≥áÊñôÂ§æ '$DIAG_DIR'"
    echo "Ë´ã‰øÆÊîπËÖ≥Êú¨‰∏≠ÁöÑ DIAG_DIR ËÆäÊï∏ÁÇ∫Ê≠£Á¢∫ÁöÑË≥áÊñôÂ§æÂêçÁ®±"
    exit 1
fi

# Ë®≠ÂÆöË∑ØÂæë
RESTORE_STAGE_DIR="$DIAG_DIR/RESTORE_STAGE"
CURSOR_HISTORY_DIR="$HOME/Library/Application Support/Cursor/User/History"
REPORT_FILE="$RESTORE_STAGE_DIR/report_map.csv"
NOT_FOUND_FILE="$RESTORE_STAGE_DIR/not_found.txt"
SUMMARY_FILE="$RESTORE_STAGE_DIR/_SUMMARY.txt"

# Âª∫Á´ãÊö´Â≠òÁõÆÈåÑ
mkdir -p "$RESTORE_STAGE_DIR"

echo "üîç ÈñãÂßãÂæû Cursor Local History ÈÇÑÂéüÊ™îÊ°à..."
echo "üìÅ Êö´Â≠òÁõÆÈåÑÔºö$RESTORE_STAGE_DIR"
echo ""

# Ê∏ÖÁ©∫Ëº∏Âá∫Ê™îÊ°à
> "$REPORT_FILE"
> "$NOT_FOUND_FILE"

# ÂØ´ÂÖ• CSV Ê®ôÈ°å
echo "Áõ∏Â∞çË∑ØÂæë,‰æÜÊ∫êÊ™î,Êö´Â≠òË∑ØÂæë,‰øÆÊîπÊôÇÈñì,Ê™îÊ°àÂ§ßÂ∞è" > "$REPORT_FILE"

# Âêà‰ΩµÊ∏ÖÂñÆÊ™îÊ°à
TEMP_LIST="$RESTORE_STAGE_DIR/temp_file_list.txt"
cat "$DIAG_DIR/maybe_deleted_paths.txt" "$DIAG_DIR/maybe_overwritten_paths.txt" 2>/dev/null | sort | uniq > "$TEMP_LIST"

TOTAL_FILES=$(wc -l < "$TEMP_LIST")
FOUND_COUNT=0
NOT_FOUND_COUNT=0

echo "üìã Á∏ΩÂÖ±ÈúÄË¶ÅËôïÁêÜ $TOTAL_FILES ÂÄãÊ™îÊ°à"
echo ""

# ËôïÁêÜÊØèÂÄãÊ™îÊ°à
while IFS= read -r file_path; do
    if [ -z "$file_path" ]; then
        continue
    fi
    
    echo "üîç ËôïÁêÜÔºö$file_path"
    
    # ÂèñÂæóÊ™îÊ°àÂêçÁ®±
    filename=$(basename "$file_path")
    
    # Âú® Cursor History ‰∏≠ÊêúÂ∞ãÊ™îÊ°à
    found_files=()
    
    # ÊêúÂ∞ãÊâÄÊúâ entries.json Ê™îÊ°à
    if [ -d "$CURSOR_HISTORY_DIR" ]; then
        while IFS= read -r entry_file; do
            if [ -f "$entry_file" ]; then
                # Ê™¢Êü•ÊòØÂê¶ÂåÖÂê´ÁõÆÊ®ôÊ™îÊ°àË∑ØÂæë
                if grep -q "$file_path" "$entry_file" 2>/dev/null; then
                    # ÂèñÂæóË©≤ entry ÁöÑ‰øÆÊîπÊôÇÈñì
                    mod_time=$(stat -f "%m" "$entry_file" 2>/dev/null || echo "0")
                    found_files+=("$entry_file|$mod_time")
                fi
            fi
        done < <(find "$CURSOR_HISTORY_DIR" -name "entries.json" 2>/dev/null)
    fi
    
    # Â¶ÇÊûúÊ≤íÊâæÂà∞ÔºåÂòóË©¶ÊêúÂ∞ãÊ™îÊ°àÂêçÁ®±
    if [ ${#found_files[@]} -eq 0 ]; then
        if [ -d "$CURSOR_HISTORY_DIR" ]; then
            while IFS= read -r entry_file; do
                if [ -f "$entry_file" ]; then
                    if grep -q "$filename" "$entry_file" 2>/dev/null; then
                        mod_time=$(stat -f "%m" "$entry_file" 2>/dev/null || echo "0")
                        found_files+=("$entry_file|$mod_time")
                    fi
                fi
            done < <(find "$CURSOR_HISTORY_DIR" -name "entries.json" 2>/dev/null)
        fi
    fi
    
    # ÈÅ∏ÊìáÊúÄÊñ∞ÁöÑÊ™îÊ°à
    if [ ${#found_files[@]} -gt 0 ]; then
        # Êåâ‰øÆÊîπÊôÇÈñìÊéíÂ∫èÔºåÂèñÊúÄÊñ∞ÁöÑ
        latest_entry=""
        latest_time=0
        
        for entry in "${found_files[@]}"; do
            entry_file=$(echo "$entry" | cut -d'|' -f1)
            entry_time=$(echo "$entry" | cut -d'|' -f2)
            
            if [ "$entry_time" -gt "$latest_time" ]; then
                latest_time="$entry_time"
                latest_entry="$entry_file"
            fi
        done
        
        # Âæû entries.json ‰∏≠ÊèêÂèñÊ™îÊ°àÂÖßÂÆπ
        if [ -f "$latest_entry" ]; then
            # ÂòóË©¶Âæû JSON ‰∏≠ÊèêÂèñÊ™îÊ°àÂÖßÂÆπ
            temp_content=$(mktemp)
            
            # ‰ΩøÁî® Python Ëß£Êûê JSON ‰∏¶ÊèêÂèñÊ™îÊ°àÂÖßÂÆπ
            python3 -c "
import json
import sys
import os

try:
    with open('$latest_entry', 'r') as f:
        data = json.load(f)
    
    # Â∞ãÊâæÂåÖÂê´ÁõÆÊ®ôË∑ØÂæëÁöÑË≥áÊ∫ê
    target_path = '$file_path'
    target_filename = '$filename'
    
    for entry in data.get('entries', []):
        entry_id = entry.get('id', '')
        # Ê™¢Êü•ÊòØÂê¶ÊúâÂ∞çÊáâÁöÑÊ™îÊ°àÂÖßÂÆπ
        entry_dir = os.path.dirname('$latest_entry')
        content_file = os.path.join(entry_dir, entry_id)
        
        if os.path.exists(content_file):
            with open(content_file, 'r') as cf:
                content = cf.read()
                if target_path in content or target_filename in content:
                    print(content)
                    break
except:
    pass
" > "$temp_content" 2>/dev/null
            
            # Ê™¢Êü•ÊòØÂê¶ÊúâÂÖßÂÆπ
            if [ -s "$temp_content" ]; then
                # Âª∫Á´ãÁõÆÊ®ôÁõÆÈåÑ
                target_dir="$RESTORE_STAGE_DIR/$(dirname "$file_path")"
                mkdir -p "$target_dir"
                
                # ËôïÁêÜÈáçË§áÊ™îÂêç
                target_file="$RESTORE_STAGE_DIR/$file_path"
                counter=1
                while [ -f "$target_file" ]; do
                    target_file="${target_file%.*}.alt${counter}.${target_file##*.}"
                    counter=$((counter + 1))
                done
                
                # Ë§áË£ΩÊ™îÊ°à
                cp "$temp_content" "$target_file"
                
                # ÂèñÂæóÊ™îÊ°àË≥áË®ä
                file_size=$(stat -f "%z" "$target_file" 2>/dev/null || echo "0")
                mod_time_str=$(date -r "$latest_time" "+%Y-%m-%d %H:%M:%S" 2>/dev/null || echo "Êú™Áü•")
                
                # Ë®òÈåÑÂà∞ CSV
                echo "$file_path,$latest_entry,$target_file,$mod_time_str,$file_size" >> "$REPORT_FILE"
                
                echo "  ‚úÖ Â∑≤ÈÇÑÂéüÂà∞Ôºö$target_file"
                FOUND_COUNT=$((FOUND_COUNT + 1))
            else
                echo "$file_path" >> "$NOT_FOUND_FILE"
                echo "  ‚ùå Êâæ‰∏çÂà∞ÂÖßÂÆπ"
                NOT_FOUND_COUNT=$((NOT_FOUND_COUNT + 1))
            fi
            
            rm -f "$temp_content"
        else
            echo "$file_path" >> "$NOT_FOUND_FILE"
            echo "  ‚ùå Êâæ‰∏çÂà∞Ê™îÊ°à"
            NOT_FOUND_COUNT=$((NOT_FOUND_COUNT + 1))
        fi
    else
        echo "$file_path" >> "$NOT_FOUND_FILE"
        echo "  ‚ùå Âú® Local History ‰∏≠Êâæ‰∏çÂà∞"
        NOT_FOUND_COUNT=$((NOT_FOUND_COUNT + 1))
    fi
    
    echo ""
done < "$TEMP_LIST"

# ÁîüÊàêÁ∏ΩÁµêÂ†±Âëä
cat > "$SUMMARY_FILE" << EOF
Git Ê™îÊ°àÊïëÊè¥Á∏ΩÁµêÂ†±Âëä
ÁîüÊàêÊôÇÈñìÔºö$(date)
===========================================

üìä ËôïÁêÜÁµêÊûúÔºö
- Á∏ΩÊ™îÊ°àÊï∏Ôºö$TOTAL_FILES
- ÊàêÂäüÈÇÑÂéüÔºö$FOUND_COUNT
- Êâæ‰∏çÂà∞Ôºö$NOT_FOUND_COUNT
- ÊàêÂäüÁéáÔºö$(( (FOUND_COUNT * 100) / TOTAL_FILES ))%

üìÅ Ëº∏Âá∫Ê™îÊ°àÔºö
- report_map.csvÔºöË©≥Á¥∞ÈÇÑÂéüË®òÈåÑ
- not_found.txtÔºöÊâæ‰∏çÂà∞ÁöÑÊ™îÊ°àÊ∏ÖÂñÆ
- RESTORE_STAGE/ÔºöÈÇÑÂéüÁöÑÊ™îÊ°àÊö´Â≠òÂçÄ

üîß ‰∏ã‰∏ÄÊ≠•Ôºö
1. Ê™¢Êü• RESTORE_STAGE/ ÁõÆÈåÑ‰∏≠ÁöÑÊ™îÊ°à
2. Âª∫Á´ã apply_list.txtÔºà‰∏ÄË°å‰∏ÄÂÄãË¶ÅÈÇÑÂéüÁöÑÊ™îÊ°àË∑ØÂæëÔºâ
3. Âü∑Ë°å apply_staged_restore.sh Â•óÁî®ÈÇÑÂéü

‚ö†Ô∏è  Ê≥®ÊÑèÔºö
- ÊâÄÊúâÊ™îÊ°àÈÉΩÂ∑≤Ë§áË£ΩÂà∞Êö´Â≠òÂçÄÔºå‰∏çÊúÉË¶ÜËìãÂéüÂ∞àÊ°à
- Ë´ã‰ªîÁ¥∞Ê™¢Êü•Ê™îÊ°àÂÖßÂÆπÂæåÂÜçÊ±∫ÂÆöÊòØÂê¶Â•óÁî®
EOF

# Ê∏ÖÁêÜÊö´Â≠òÊ™îÊ°à
rm -f "$TEMP_LIST"

echo "‚úÖ ÈÇÑÂéüÂÆåÊàêÔºÅ"
echo "üìÅ Êö´Â≠òÁõÆÈåÑÔºö$RESTORE_STAGE_DIR"
echo "üìä ÊàêÂäüÈÇÑÂéüÔºö$FOUND_COUNT/$TOTAL_FILES ÂÄãÊ™îÊ°à"
echo "üìã Ë©≥Á¥∞Â†±ÂëäÔºö$SUMMARY_FILE"
echo ""
echo "üîß ‰∏ã‰∏ÄÊ≠•Ôºö"
echo "   1. Ê™¢Êü• RESTORE_STAGE/ ÁõÆÈåÑ‰∏≠ÁöÑÊ™îÊ°à"
echo "   2. Âª∫Á´ã apply_list.txt"
echo "   3. Âü∑Ë°å apply_staged_restore.sh"

