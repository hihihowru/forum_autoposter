"""
統一的股票代號與名稱對應表
避免在多個地方重複定義相同的對應關係
"""

# 統一的股票代號與名稱對應表
STOCK_CODE_TO_NAME = {
    # 半導體
    "2330": "台積電",
    "2454": "聯發科", 
    "2303": "聯電",
    "3711": "日月光投控",
    "3034": "聯詠",
    "2408": "南亞科",
    "2379": "瑞昱",
    "3443": "創意",
    "6415": "矽力-KY",
    "3529": "力旺",
    
    # 電子代工
    "2317": "鴻海",
    "2382": "廣達",
    "3231": "緯創",
    "4938": "和碩",
    "2377": "微星",
    "2474": "可成",
    "3008": "大立光",
    "2498": "宏達電",
    
    # 電源管理
    "2308": "台達電",
    "8046": "南電",
    
    # 電信
    "2412": "中華電",
    "3045": "台灣大",
    "4904": "遠傳",
    
    # 金融
    "2882": "國泰金",
    "2881": "富邦金",
    "2891": "中信金",
    "2885": "元大金",
    "2886": "兆豐金",
    "2884": "玉山金",
    "2892": "第一金",
    "2880": "華南金",
    "2883": "開發金",
    "2890": "永豐金",
    "2888": "新光金",
    "2887": "台新金",
    
    # 航運
    "2603": "長榮",
    "2609": "陽明",
    "2615": "萬海",
    
    # 航太
    "2634": "漢翔",
    "8033": "雷虎",
    
    # 鋼鐵
    "2002": "中鋼",
    
    # 水泥
    "1101": "台泥",
    "1102": "亞泥",
    
    # 石化
    "1301": "台塑",
    "1303": "南亞",
    "1326": "台化",
    "6505": "台塑化",
    
    # 食品
    "1216": "統一",
    "1201": "味全",
    "1234": "黑松",
    
    # AI概念
    "2359": "所羅門",
    "1504": "東元",
    "8927": "富邦媒",
    "8932": "智邦",
    
    # ETF
    "0050": "元大台灣50",
    "0056": "元大高股息",
    "TWA00": "台股指數"
}

# 反向對應表：股票名稱 -> 代號
STOCK_NAME_TO_CODE = {v: k for k, v in STOCK_CODE_TO_NAME.items()}

def get_stock_name(stock_code: str) -> str:
    """
    根據股票代號獲取股票名稱
    
    Args:
        stock_code: 股票代號 (例如: "2330")
        
    Returns:
        股票名稱 (例如: "台積電")
    """
    return STOCK_CODE_TO_NAME.get(stock_code, f"股票{stock_code}")

def get_stock_code(stock_name: str) -> str:
    """
    根據股票名稱獲取股票代號
    
    Args:
        stock_name: 股票名稱 (例如: "台積電")
        
    Returns:
        股票代號 (例如: "2330")
    """
    return STOCK_NAME_TO_CODE.get(stock_name, stock_name)

def get_all_stock_codes() -> list[str]:
    """獲取所有股票代號列表"""
    return list(STOCK_CODE_TO_NAME.keys())

def get_all_stock_names() -> list[str]:
    """獲取所有股票名稱列表"""
    return list(STOCK_CODE_TO_NAME.values())

def is_valid_stock_code(stock_code: str) -> bool:
    """檢查股票代號是否有效"""
    return stock_code in STOCK_CODE_TO_NAME

def get_stock_mapping() -> dict[str, str]:
    """獲取完整的股票對應表"""
    return STOCK_CODE_TO_NAME.copy()

# 常用股票列表（按重要性排序）
POPULAR_STOCKS = [
    "2330",  # 台積電
    "2317",  # 鴻海
    "2454",  # 聯發科
    "2308",  # 台達電
    "2412",  # 中華電
    "2882",  # 國泰金
    "2881",  # 富邦金
    "2603",  # 長榮
    "2609",  # 陽明
    "2002",  # 中鋼
]

# 半導體相關股票
SEMICONDUCTOR_STOCKS = [
    "2330",  # 台積電
    "2454",  # 聯發科
    "2303",  # 聯電
    "3711",  # 日月光投控
    "3034",  # 聯詠
    "2408",  # 南亞科
    "2379",  # 瑞昱
    "3443",  # 創意
    "6415",  # 矽力-KY
    "3529",  # 力旺
]

# 金融股
FINANCIAL_STOCKS = [
    "2882",  # 國泰金
    "2881",  # 富邦金
    "2891",  # 中信金
    "2885",  # 元大金
    "2886",  # 兆豐金
    "2884",  # 玉山金
    "2892",  # 第一金
    "2880",  # 華南金
    "2883",  # 開發金
    "2890",  # 永豐金
]

if __name__ == "__main__":
    # 測試函數
    print("測試股票對應表:")
    print(f"2330 -> {get_stock_name('2330')}")
    print(f"台積電 -> {get_stock_code('台積電')}")
    print(f"總共有 {len(STOCK_CODE_TO_NAME)} 個股票對應")
    print(f"常用股票: {[get_stock_name(code) for code in POPULAR_STOCKS[:5]]}")
